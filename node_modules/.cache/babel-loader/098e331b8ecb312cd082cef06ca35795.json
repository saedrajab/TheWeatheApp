{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Saed\\\\Desktop\\\\optile\\\\Optile-weather-app-master\\\\OptileWeatherapp-master\\\\OptileWeatherapp-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Saed\\\\Desktop\\\\optile\\\\Optile-weather-app-master\\\\OptileWeatherapp-master\\\\OptileWeatherapp-master\\\\src\\\\containerComponents\\\\horizantalscrollingComponent.js\";\nimport React, { useState } from \"react\";\nimport $ from \"jquery\";\nimport moment from \"moment\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { connect } from \"react-redux\";\nimport WeatherBarChart from \"../components/barChartComponent\";\nimport WeatherCard from \"../components/weatherCardComponent\";\n\nfunction HorizantalScrollCard(props) {\n  const weatherData = props.weatherData.list;\n  const barChartConfig = {}; //const [cardLoadConfig, setLoadCardConfig]=useState({timeSlot:\"day\", seletedItem:\"cardNumber_0\"});\n\n  const cardLoadConfig = {\n    timeSlot: \"day\",\n    seletedItem: \"cardNumber_0\"\n  };\n  const formatedData = {};\n  const formatedDataArray = [];\n  weatherData.forEach(data => {\n    let weatherDate = moment(data.dt_txt).format(\"DD-MMM-YYYY\");\n\n    if (formatedData[weatherDate]) {\n      formatedData[weatherDate].forecast.push(data);\n    } else {\n      formatedData[weatherDate] = {\n        forecast: []\n      };\n      formatedData[weatherDate].forecast.push(data);\n      formatedDataArray.push({\n        weatherDate: formatedData[weatherDate]\n      });\n    }\n  });\n\n  function cardOnClickHandler(data) {\n    setBarChartOptions(data); //setLoadCardConfig({timeSlot:data.timeSlot,seletedItem:data.seletedItem});\n  }\n\n  function scroll(direction) {\n    var maxRange = $(\".card-container\").width();\n    let far = $(\".card-container\").width() / 2 * direction;\n    let pos = $(\".card-container\").scrollLeft() + far;\n    $(\".card-container\").animate({\n      scrollLeft: pos\n    }, 1000);\n\n    if (pos === 0) {\n      $(\".prev\").hide();\n      $(\".next\").show();\n    } else if (pos >= maxRange) {\n      $(\".next\").hide();\n      $(\".prev\").show();\n    } else {\n      $(\".next\").show();\n      $(\".prev\").show();\n    }\n  }\n\n  let cardList = [];\n  let i = 0;\n\n  for (const key of Object.keys(formatedData)) {\n    if (i === 0) {\n      barChartConfig.cityName = props.cityName;\n      barChartConfig.forecastData = formatedData[key];\n      barChartConfig.titleDate = key;\n    }\n\n    cardList.push(React.createElement(WeatherCard, {\n      key: key,\n      cityName: props.cityName,\n      className: \"card\",\n      forecastData: formatedData[key],\n      cardDate: key,\n      cardTimeSlot: cardLoadConfig.timeSlot,\n      cardNumber: \"cardNumber_\".concat(i),\n      seletedItem: cardLoadConfig.seletedItem,\n      temperatureType: props.temperatureType,\n      cardOnClickHandler: cardOnClickHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n    i++;\n  }\n\n  const _useState = useState(barChartConfig),\n        _useState2 = _slicedToArray(_useState, 2),\n        barChartOptions = _useState2[0],\n        setBarChartOptions = _useState2[1];\n\n  return React.createElement(\"div\", {\n    className: \"cardMainDiv\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"prev\",\n    style: {\n      display: \"none\"\n    },\n    onClick: () => {\n      scroll(-2);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"material-icons rotateCalss prevNextIcon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"arrow_right_alt\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"next\",\n    onClick: () => {\n      scroll(2);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"material-icons prevNextIcon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"arrow_right_alt\")))), React.createElement(\"div\", {\n    className: \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, cardList)), React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(WeatherBarChart, {\n    barChartConfigData: barChartOptions,\n    temperatureType: props.radioButtonVaue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    radioButtonVaue: state.radioButtonVaue\n  };\n};\n\nexport default connect(mapStateToProps, null)(HorizantalScrollCard);","map":{"version":3,"sources":["C:\\Users\\Saed\\Desktop\\optile\\Optile-weather-app-master\\OptileWeatherapp-master\\OptileWeatherapp-master\\src\\containerComponents\\horizantalscrollingComponent.js"],"names":["React","useState","$","moment","CssBaseline","connect","WeatherBarChart","WeatherCard","HorizantalScrollCard","props","weatherData","list","barChartConfig","cardLoadConfig","timeSlot","seletedItem","formatedData","formatedDataArray","forEach","data","weatherDate","dt_txt","format","forecast","push","cardOnClickHandler","setBarChartOptions","scroll","direction","maxRange","width","far","pos","scrollLeft","animate","hide","show","cardList","i","key","Object","keys","cityName","forecastData","titleDate","temperatureType","barChartOptions","display","justifyContent","radioButtonVaue","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport $ from \"jquery\";\nimport moment from \"moment\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { connect } from \"react-redux\";\nimport WeatherBarChart from \"../components/barChartComponent\";\nimport WeatherCard from \"../components/weatherCardComponent\";\n\nfunction HorizantalScrollCard(props) {\n  const weatherData = props.weatherData.list;\n  const barChartConfig = {};\n  //const [cardLoadConfig, setLoadCardConfig]=useState({timeSlot:\"day\", seletedItem:\"cardNumber_0\"});\n  const cardLoadConfig = { timeSlot: \"day\", seletedItem: \"cardNumber_0\" };\n  const formatedData = {};\n  const formatedDataArray = [];\n  weatherData.forEach(data => {\n    let weatherDate = moment(data.dt_txt).format(\"DD-MMM-YYYY\");\n    if (formatedData[weatherDate]) {\n      formatedData[weatherDate].forecast.push(data);\n    } else {\n      formatedData[weatherDate] = { forecast: [] };\n      formatedData[weatherDate].forecast.push(data);\n      formatedDataArray.push({ weatherDate: formatedData[weatherDate] });\n    }\n  });\n\n  function cardOnClickHandler(data) {\n    setBarChartOptions(data);\n    //setLoadCardConfig({timeSlot:data.timeSlot,seletedItem:data.seletedItem});\n  }\n\n  function scroll(direction) {\n    var maxRange = $(\".card-container\").width();\n    let far = ($(\".card-container\").width() / 2) * direction;\n    let pos = $(\".card-container\").scrollLeft() + far;\n    $(\".card-container\").animate({ scrollLeft: pos }, 1000);\n    if (pos === 0) {\n      $(\".prev\").hide();\n      $(\".next\").show();\n    } else if (pos >= maxRange) {\n      $(\".next\").hide();\n      $(\".prev\").show();\n    } else {\n      $(\".next\").show();\n      $(\".prev\").show();\n    }\n  }\n  let cardList = [];\n  let i = 0;\n  for (const key of Object.keys(formatedData)) {\n    if (i === 0) {\n      barChartConfig.cityName = props.cityName;\n      barChartConfig.forecastData = formatedData[key];\n      barChartConfig.titleDate = key;\n    }\n    cardList.push(\n      <WeatherCard\n        key={key}\n        cityName={props.cityName}\n        className=\"card\"\n        forecastData={formatedData[key]}\n        cardDate={key}\n        cardTimeSlot={cardLoadConfig.timeSlot}\n        cardNumber={`cardNumber_${i}`}\n        seletedItem={cardLoadConfig.seletedItem}\n        temperatureType={props.temperatureType}\n        cardOnClickHandler={cardOnClickHandler}\n      />\n    );\n    i++;\n  }\n\n  const [barChartOptions, setBarChartOptions] = useState(barChartConfig);\n  return (\n    <div className=\"cardMainDiv\">\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <div>\n          <span\n            className=\"prev\"\n            style={{ display: \"none\" }}\n            onClick={() => {\n              scroll(-2);\n            }}\n          >\n            <i className=\"material-icons rotateCalss prevNextIcon\">\n              arrow_right_alt\n            </i>\n          </span>\n        </div>\n        <div>\n          <span\n            className=\"next\"\n            onClick={() => {\n              scroll(2);\n            }}\n          >\n            <i className=\"material-icons prevNextIcon\">arrow_right_alt</i>\n          </span>\n        </div>\n      </div>\n      <div className=\"wrapper\">\n        <div className=\"card-container\">{cardList}</div>\n      </div>\n      <CssBaseline />\n      <WeatherBarChart\n        barChartConfigData={barChartOptions}\n        temperatureType={props.radioButtonVaue}\n      />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    radioButtonVaue: state.radioButtonVaue\n  };\n};\n\nexport default connect(mapStateToProps, null)(HorizantalScrollCard);\n"]},"metadata":{},"sourceType":"module"}