{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Saed\\\\Desktop\\\\optile\\\\The Webapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Saed\\\\Desktop\\\\optile\\\\The Webapp\\\\src\\\\components\\\\weatherCardComponent.js\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport TimeSliderComponent from \"./timeSliderComponent\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 400\n  },\n  media: {\n    height: 150\n  }\n});\n\nfunction WeatherCard(props) {\n  const classes = useStyles();\n  let forecastDataLength = props.forecastData.forecast.length;\n  const max = new Date(props.forecastData.forecast[forecastDataLength - 1].dt_txt);\n  const maxSliderValue = moment(props.forecastData.forecast[forecastDataLength - 1].dt_txt).format(\"H\");\n  const maxSlider = max.setHours(maxSliderValue, 50, 50, 50);\n\n  const _React$useState = React.useState(maxSlider),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        timeSliderValue = _React$useState2[0],\n        setTimeSliderValue = _React$useState2[1];\n\n  let selectedTimeSlot = props.cardTimeSlot;\n  let selectedCardDateTitle = moment(props.cardDate).format(\"D MMMM YY\");\n\n  if (timeSliderValue !== maxSlider) {\n    selectedTimeSlot = timeSliderValue;\n    selectedCardDateTitle = moment(timeSliderValue).format(\"D MMMM YY, h A\");\n  }\n\n  function getDayAverageTemprature(data) {\n    let averageValue = \"\";\n\n    if (props.radioButtonVaue === \"fahrenheit\") {\n      averageValue = data.reduce((average, vaue) => {\n        return Math.round(average + vaue.main.temp_min + vaue.main.temp_max);\n      }, 0);\n    } else {\n      averageValue = data.reduce((average, vaue) => {\n        let min_cel = Math.round((vaue.main.temp_min - 32) / 1.8);\n        let max_cel = Math.round((vaue.main.temp_max - 32) / 1.8);\n        return Math.round(average + min_cel + max_cel);\n      }, 0);\n    }\n\n    let divisinValue = data.length * 2;\n    return Math.round(averageValue / divisinValue);\n  }\n\n  function getTimeSlotAverageTemprature(data) {\n    let averageValue = 1;\n\n    if (props.radioButtonVaue === \"fahrenheit\") {\n      averageValue = Math.round(data.main.temp_min + data.main.temp_max);\n    } else {\n      let min_cel = Math.round((data.main.temp_min - 32) / 1.8);\n      let max_cel = Math.round((data.main.temp_max - 32) / 1.8);\n      averageValue = Math.round(min_cel + max_cel);\n    }\n\n    return Math.round(averageValue / 2);\n  }\n\n  function getSelectedTimeSlotData(data, selectedTimeSlot) {\n    let selectedData = \"\";\n    let selectedTimeSlotStr = moment(selectedTimeSlot).format(\"H\");\n\n    for (let i = 0; i < data.length; i++) {\n      let dateStr = moment(data[i].dt_txt).format(\"H\");\n\n      if (selectedTimeSlotStr === dateStr) {\n        selectedData = data[i];\n      }\n    }\n\n    return selectedData;\n  }\n\n  function getDayAverageHumidity(data) {\n    let averageValue = data.reduce((average, vaue) => {\n      return Math.round(average + vaue.main.humidity);\n    }, 0);\n    let divisinValue = data.length;\n    return Math.round(averageValue / divisinValue);\n  }\n\n  function getDayAverageWind(data) {\n    let averageValue = data.reduce((average, vaue) => {\n      return Math.round(average + vaue.wind.speed);\n    }, 0);\n    let divisinValue = data.length;\n    return Math.round(averageValue / divisinValue);\n  }\n\n  function getTempratureUnit() {\n    return props.radioButtonVaue === \"fahrenheit\" ? \"°F\" : \"°C\";\n  }\n\n  function getTempratureValue() {\n    let value = \"\";\n\n    if (selectedTimeSlot === \"day\") {\n      value = getDayAverageTemprature(props.forecastData.forecast);\n    } else {\n      let selectedData = getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n      value = getTimeSlotAverageTemprature(selectedData);\n    }\n\n    let textUnit = getTempratureUnit();\n    return value + textUnit;\n  }\n\n  function getHumidityValue() {\n    let value = 0;\n\n    if (selectedTimeSlot === \"day\") {\n      value = getDayAverageHumidity(props.forecastData.forecast);\n    } else {\n      let selectedData = getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n      value = selectedData.main.humidity;\n    }\n\n    return \"\".concat(value, \"%\");\n  }\n\n  function getSeaLevel() {\n    let value = 0;\n\n    if (selectedTimeSlot === \"day\") {\n      value = getDayAverageHumidity(props.forecastData.forecast);\n    } else {\n      let selectedData = getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n      value = selectedData.main.sea_level;\n    }\n\n    return \"\".concat(value, \"%\");\n  }\n\n  function getWindValue() {\n    let value = 0;\n    let unit = props.radioButtonVaue === \"fahrenheit\" ? \"mph\" : \"meter/sec\";\n\n    if (selectedTimeSlot === \"day\") {\n      value = getDayAverageWind(props.forecastData.forecast);\n    } else {\n      let selectedData = getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n      value = Math.round(selectedData.wind.speed);\n    }\n\n    return value + \" \" + unit;\n  }\n\n  function getWeatherDescription() {\n    let descrption = \"\";\n\n    if (selectedTimeSlot !== \"day\") {\n      let selectedData = getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n      descrption = selectedData.weather[0].description;\n    }\n\n    return descrption;\n  }\n\n  function getWatherIcon() {\n    let iconId = \"804\";\n\n    if (selectedTimeSlot === \"day\") {\n      iconId = props.forecastData.forecast[0].weather[0].id;\n    } else {\n      let selectedData = getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n      iconId = selectedData.weather[0].id;\n    }\n\n    return iconId;\n  }\n\n  const tempratureValue = getTempratureValue();\n  const humidityValue = getHumidityValue();\n  const windValue = getWindValue();\n  const tempratureDescriptionText = getWeatherDescription();\n  const weatherIconId = getWatherIcon();\n  const sea_level = getSeaLevel();\n\n  const timeSliderChange = (event, newValue) => {\n    setTimeSliderValue(newValue);\n  };\n\n  return React.createElement(\"div\", {\n    className: props.className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(Card, {\n    className: classes.card,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, React.createElement(CardActionArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"weatherCardHeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"weatherCardHeaderDate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, moment(props.cardDate).format(\"dddd\")), React.createElement(\"span\", {\n    className: \"weatherCardHeaderDate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, selectedCardDateTitle)), React.createElement(CardContent, {\n    onClick: () => {\n      props.cardOnClickHandler({\n        cityName: props.cityName,\n        forecastData: props.forecastData,\n        titleDate: props.cardDate,\n        seletedItem: props.cardNumber,\n        timeSlot: selectedTimeSlot\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    style: {\n      color: \"rgb(29, 123, 123)\",\n      fontWeight: \"bold\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, props.cityName, \" \")), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    style: {\n      color: \"#545151\",\n      fontSize: \"46px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, \" \", tempratureValue)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"weatherIcon wi wi-owm-\".concat(weatherIconId, \" main-icon\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }))), React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, \"Humidity: \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, humidityValue, \"  \", tempratureDescriptionText, \" \")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }), \"Wind: \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, \" \", windValue, \" \")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }), \"Sea Level: \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, sea_level))), React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }), React.createElement(TimeSliderComponent, {\n    timeSliderValue: timeSliderValue,\n    forecastData: props.forecastData,\n    onclickHandler: timeSliderChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  })), React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    radioButtonVaue: state.radioButtonVaue\n  };\n};\n\nexport default connect(mapStateToProps, null)(WeatherCard);","map":{"version":3,"sources":["C:\\Users\\Saed\\Desktop\\optile\\The Webapp\\src\\components\\weatherCardComponent.js"],"names":["React","makeStyles","Card","CardActionArea","TimeSliderComponent","CardContent","Typography","CssBaseline","moment","connect","useStyles","card","maxWidth","media","height","WeatherCard","props","classes","forecastDataLength","forecastData","forecast","length","max","Date","dt_txt","maxSliderValue","format","maxSlider","setHours","useState","timeSliderValue","setTimeSliderValue","selectedTimeSlot","cardTimeSlot","selectedCardDateTitle","cardDate","getDayAverageTemprature","data","averageValue","radioButtonVaue","reduce","average","vaue","Math","round","main","temp_min","temp_max","min_cel","max_cel","divisinValue","getTimeSlotAverageTemprature","getSelectedTimeSlotData","selectedData","selectedTimeSlotStr","i","dateStr","getDayAverageHumidity","humidity","getDayAverageWind","wind","speed","getTempratureUnit","getTempratureValue","value","textUnit","getHumidityValue","getSeaLevel","sea_level","getWindValue","unit","getWeatherDescription","descrption","weather","description","getWatherIcon","iconId","id","tempratureValue","humidityValue","windValue","tempratureDescriptionText","weatherIconId","timeSliderChange","event","newValue","className","cardOnClickHandler","cityName","titleDate","seletedItem","cardNumber","timeSlot","color","fontWeight","display","justifyContent","fontSize","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport TimeSliderComponent from \"./timeSliderComponent\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 400\n  },\n  media: {\n    height: 150\n  }\n});\n\nfunction WeatherCard(props) {\n  const classes = useStyles();\n  let forecastDataLength = props.forecastData.forecast.length;\n  const max = new Date(\n    props.forecastData.forecast[forecastDataLength - 1].dt_txt\n  );\n  const maxSliderValue = moment(\n    props.forecastData.forecast[forecastDataLength - 1].dt_txt\n  ).format(\"H\");\n  const maxSlider = max.setHours(maxSliderValue, 50, 50, 50);\n  const [timeSliderValue, setTimeSliderValue] = React.useState(maxSlider);\n  let selectedTimeSlot = props.cardTimeSlot;\n  let selectedCardDateTitle = moment(props.cardDate).format(\"D MMMM YY\");\n  if (timeSliderValue !== maxSlider) {\n    selectedTimeSlot = timeSliderValue;\n    selectedCardDateTitle = moment(timeSliderValue).format(\"D MMMM YY, h A\");\n  }\n\n  function getDayAverageTemprature(data) {\n    let averageValue = \"\";\n    if (props.radioButtonVaue === \"fahrenheit\") {\n      averageValue = data.reduce((average, vaue) => {\n        return Math.round(average + vaue.main.temp_min + vaue.main.temp_max);\n      }, 0);\n    } else {\n      averageValue = data.reduce((average, vaue) => {\n        let min_cel = Math.round((vaue.main.temp_min - 32) / 1.8);\n        let max_cel = Math.round((vaue.main.temp_max - 32) / 1.8);\n        return Math.round(average + min_cel + max_cel);\n      }, 0);\n    }\n\n    let divisinValue = data.length * 2;\n    return Math.round(averageValue / divisinValue);\n  }\n\n  function getTimeSlotAverageTemprature(data) {\n    let averageValue = 1;\n    if (props.radioButtonVaue === \"fahrenheit\") {\n      averageValue = Math.round(data.main.temp_min + data.main.temp_max);\n    } else {\n      let min_cel = Math.round((data.main.temp_min - 32) / 1.8);\n      let max_cel = Math.round((data.main.temp_max - 32) / 1.8);\n      averageValue = Math.round(min_cel + max_cel);\n    }\n\n    return Math.round(averageValue / 2);\n  }\n\n  function getSelectedTimeSlotData(data, selectedTimeSlot) {\n    let selectedData = \"\";\n    let selectedTimeSlotStr = moment(selectedTimeSlot).format(\"H\");\n    for (let i = 0; i < data.length; i++) {\n      let dateStr = moment(data[i].dt_txt).format(\"H\");\n      if (selectedTimeSlotStr === dateStr) {\n        selectedData = data[i];\n      }\n    }\n\n    return selectedData;\n  }\n\n  function getDayAverageHumidity(data) {\n    let averageValue = data.reduce((average, vaue) => {\n      return Math.round(average + vaue.main.humidity);\n    }, 0);\n    let divisinValue = data.length;\n    return Math.round(averageValue / divisinValue);\n  }\n  function getDayAverageWind(data) {\n    let averageValue = data.reduce((average, vaue) => {\n      return Math.round(average + vaue.wind.speed);\n    }, 0);\n    let divisinValue = data.length;\n    return Math.round(averageValue / divisinValue);\n  }\n  function getTempratureUnit() {\n    return props.radioButtonVaue === \"fahrenheit\" ? \"°F\" : \"°C\";\n  }\n\n  function getTempratureValue() {\n    let value = \"\";\n    if (selectedTimeSlot === \"day\") {\n      value = getDayAverageTemprature(props.forecastData.forecast);\n    } else {\n      let selectedData = getSelectedTimeSlotData(\n        props.forecastData.forecast,\n        selectedTimeSlot\n      );\n      value = getTimeSlotAverageTemprature(selectedData);\n    }\n    let textUnit = getTempratureUnit();\n    return value + textUnit;\n  }\n  function getHumidityValue() {\n    let value = 0;\n    if (selectedTimeSlot === \"day\") {\n      value = getDayAverageHumidity(props.forecastData.forecast);\n    } else {\n      let selectedData = getSelectedTimeSlotData(\n        props.forecastData.forecast,\n        selectedTimeSlot\n      );\n      value = selectedData.main.humidity;\n    }\n\n    return `${value}%`;\n  }\n\n  function getSeaLevel() {\n    let value = 0;\n    if (selectedTimeSlot === \"day\") {\n      value = getDayAverageHumidity(props.forecastData.forecast);\n    } else {\n      let selectedData = getSelectedTimeSlotData(\n        props.forecastData.forecast,\n        selectedTimeSlot\n      );\n      value = selectedData.main.sea_level;\n    }\n\n    return `${value}%`;\n  }\n\n  function getWindValue() {\n    let value = 0;\n    let unit = props.radioButtonVaue === \"fahrenheit\" ? \"mph\" : \"meter/sec\";\n    if (selectedTimeSlot === \"day\") {\n      value = getDayAverageWind(props.forecastData.forecast);\n    } else {\n      let selectedData = getSelectedTimeSlotData(\n        props.forecastData.forecast,\n        selectedTimeSlot\n      );\n      value = Math.round(selectedData.wind.speed);\n    }\n    return value + \" \" + unit;\n  }\n\n  function getWeatherDescription() {\n    let descrption = \"\";\n    if (selectedTimeSlot !== \"day\") {\n      let selectedData = getSelectedTimeSlotData(\n        props.forecastData.forecast,\n        selectedTimeSlot\n      );\n      descrption = selectedData.weather[0].description;\n    }\n    return descrption;\n  }\n  function getWatherIcon() {\n    let iconId = \"804\";\n    if (selectedTimeSlot === \"day\") {\n      iconId = props.forecastData.forecast[0].weather[0].id;\n    } else {\n      let selectedData = getSelectedTimeSlotData(\n        props.forecastData.forecast,\n        selectedTimeSlot\n      );\n      iconId = selectedData.weather[0].id;\n    }\n    return iconId;\n  }\n  const tempratureValue = getTempratureValue();\n  const humidityValue = getHumidityValue();\n  const windValue = getWindValue();\n  const tempratureDescriptionText = getWeatherDescription();\n  const weatherIconId = getWatherIcon();\n  const sea_level = getSeaLevel();\n\n  const timeSliderChange = (event, newValue) => {\n    setTimeSliderValue(newValue);\n  };\n\n  return (\n    <div className={props.className}>\n      <Card className={classes.card}>\n        <CardActionArea>\n          <div className=\"weatherCardHeader\">\n            <span className=\"weatherCardHeaderDate\">\n              {moment(props.cardDate).format(\"dddd\")}\n            </span>\n            <span className=\"weatherCardHeaderDate\">\n              {selectedCardDateTitle}\n            </span>\n          </div>\n          <CardContent\n            onClick={() => {\n              props.cardOnClickHandler({\n                cityName: props.cityName,\n                forecastData: props.forecastData,\n                titleDate: props.cardDate,\n                seletedItem: props.cardNumber,\n                timeSlot: selectedTimeSlot\n              });\n            }}\n          >\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              <span style={{ color: \"rgb(29, 123, 123)\", fontWeight: \"bold\" }}>\n                {props.cityName}{\" \"}\n              </span>\n            </Typography>\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n              <div>\n                <h1 style={{ color: \"#545151\", fontSize: \"46px\" }}>\n                  {\" \"}\n                  {tempratureValue}\n                </h1>\n              </div>\n              <div>\n                <i\n                  className={`weatherIcon wi wi-owm-${weatherIconId} main-icon`}\n                />\n              </div>\n            </div>\n            <CssBaseline />\n            <div>\n              <div>\n                Humidity: <span>{humidityValue}  {tempratureDescriptionText} </span>\n              </div>\n              <div>\n                <br/>Wind: <span> {windValue} </span>\n              </div>\n              <div>\n\t\t\t  <br/>Sea Level: <span>{sea_level}</span>\n              </div>\n            </div>\n            <CssBaseline />\n            <TimeSliderComponent\n              timeSliderValue={timeSliderValue}\n              forecastData={props.forecastData}\n              onclickHandler={timeSliderChange}\n            />\n          </CardContent>\n          <CssBaseline />\n        </CardActionArea>\n      </Card>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    radioButtonVaue: state.radioButtonVaue\n  };\n};\n\nexport default connect(mapStateToProps, null)(WeatherCard);\n"]},"metadata":{},"sourceType":"module"}