{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Saed\\\\Desktop\\\\optile\\\\Optile-weather-app-master\\\\OptileWeatherapp-master\\\\OptileWeatherapp-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Saed\\\\Desktop\\\\optile\\\\Optile-weather-app-master\\\\OptileWeatherapp-master\\\\OptileWeatherapp-master\\\\src\\\\components\\\\weatherCardComponent.js\";\nimport React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport TimeSliderComponent from \"./timeSliderComponent\";\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 400\n  },\n  media: {\n    height: 150\n  }\n});\n\nfunction WeatherCard(props) {\n  const classes = useStyles();\n  let forecastDataLength = props.forecastData.forecast.length;\n  const max = new Date(props.forecastData.forecast[forecastDataLength - 1].dt_txt);\n  const maxSliderValue = moment(props.forecastData.forecast[forecastDataLength - 1].dt_txt).format(\"H\");\n  const maxSlider = max.setHours(maxSliderValue, 50, 50, 50);\n\n  const _React$useState = React.useState(maxSlider),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        timeSliderValue = _React$useState2[0],\n        setTimeSliderValue = _React$useState2[1];\n\n  let selectedTimeSlot = props.cardTimeSlot;\n  let selectedCardDateTitle = moment(props.cardDate).format(\"D MMMM YY\");\n\n  if (timeSliderValue !== maxSlider) {\n    selectedTimeSlot = timeSliderValue;\n    selectedCardDateTitle = moment(timeSliderValue).format(\"D MMMM YY, h A\");\n  }\n\n  function getDayAverageTemprature(data) {\n    let averageValue = \"\";\n\n    if (props.radioButtonVaue === \"fahrenheit\") {\n      averageValue = data.reduce((average, vaue) => {\n        return Math.round(average + vaue.main.temp_min + vaue.main.temp_max);\n      }, 0);\n    } else {\n      averageValue = data.reduce((average, vaue) => {\n        let min_cel = Math.round((vaue.main.temp_min - 32) / 1.8);\n        let max_cel = Math.round((vaue.main.temp_max - 32) / 1.8);\n        return Math.round(average + min_cel + max_cel);\n      }, 0);\n    }\n\n    let divisinValue = data.length * 2;\n    return Math.round(averageValue / divisinValue);\n  }\n\n  function getTimeSlotAverageTemprature(data) {\n    let averageValue = 1;\n\n    if (props.radioButtonVaue === \"fahrenheit\") {\n      averageValue = Math.round(data.main.temp_min + data.main.temp_max);\n    } else {\n      let min_cel = Math.round((data.main.temp_min - 32) / 1.8);\n      let max_cel = Math.round((data.main.temp_max - 32) / 1.8);\n      averageValue = Math.round(min_cel + max_cel);\n    }\n\n    return Math.round(averageValue / 2);\n  }\n\n  function getSelectedTimeSlotData(data, selectedTimeSlot) {\n    let selectedData = \"\";\n    let selectedTimeSlotStr = moment(selectedTimeSlot).format(\"H\");\n\n    for (let i = 0; i < data.length; i++) {\n      let dateStr = moment(data[i].dt_txt).format(\"H\");\n\n      if (selectedTimeSlotStr === dateStr) {\n        selectedData = data[i];\n      }\n    }\n\n    return selectedData;\n  }\n\n  function getDayAverageHumidity(data) {\n    let averageValue = data.reduce((average, vaue) => {\n      return Math.round(average + vaue.main.humidity);\n    }, 0);\n    let divisinValue = data.length;\n    return Math.round(averageValue / divisinValue);\n  }\n\n  function getDayAverageWind(data) {\n    let averageValue = data.reduce((average, vaue) => {\n      return Math.round(average + vaue.wind.speed);\n    }, 0);\n    let divisinValue = data.length;\n    return Math.round(averageValue / divisinValue);\n  }\n\n  function getTempratureUnit() {\n    return props.radioButtonVaue === \"fahrenheit\" ? \"°F\" : \"°C\";\n  }\n\n  function getTempratureValue() {\n    let value = \"\";\n\n    if (selectedTimeSlot === \"day\") {\n      value = getDayAverageTemprature(props.forecastData.forecast);\n    } else {\n      let selectedData = getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n      value = getTimeSlotAverageTemprature(selectedData);\n    }\n\n    let textUnit = getTempratureUnit();\n    return value + textUnit;\n  }\n\n  function getHumidityValue() {\n    let value = 0;\n\n    if (selectedTimeSlot === \"day\") {\n      value = getDayAverageHumidity(props.forecastData.forecast);\n    } else {\n      let selectedData = getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n      value = selectedData.main.humidity;\n    }\n\n    return \"\".concat(value, \"%\");\n  }\n\n  function getSeaLevel() {\n    let value = 0;\n\n    if (selectedTimeSlot === \"day\") {\n      value = getDayAverageHumidity(props.forecastData.forecast);\n    } else {\n      let selectedData = getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n      value = selectedData.main.sea_level;\n    }\n\n    return \"\".concat(value, \"%\");\n  }\n\n  function getWindValue() {\n    let value = 0;\n    let unit = props.radioButtonVaue === \"fahrenheit\" ? \"mph\" : \"meter/sec\";\n\n    if (selectedTimeSlot === \"day\") {\n      value = getDayAverageWind(props.forecastData.forecast);\n    } else {\n      let selectedData = getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n      value = Math.round(selectedData.wind.speed);\n    }\n\n    return value + \" \" + unit;\n  }\n\n  function getWeatherDescription() {\n    let descrption = \"\";\n\n    if (selectedTimeSlot !== \"day\") {\n      let selectedData = getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n      descrption = selectedData.weather[0].description;\n    }\n\n    return descrption;\n  }\n\n  function getWatherIcon() {\n    let iconId = \"804\";\n\n    if (selectedTimeSlot === \"day\") {\n      iconId = props.forecastData.forecast[0].weather[0].id;\n    } else {\n      let selectedData = getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n      iconId = selectedData.weather[0].id;\n    }\n\n    return iconId;\n  }\n\n  const tempratureValue = getTempratureValue();\n  const humidityValue = getHumidityValue();\n  const windValue = getWindValue();\n  const tempratureDescriptionText = getWeatherDescription();\n  const weatherIconId = getWatherIcon();\n  const sea_level = getSeaLevel();\n\n  const timeSliderChange = (event, newValue) => {\n    setTimeSliderValue(newValue);\n  };\n\n  return React.createElement(\"div\", {\n    className: props.className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(Card, {\n    className: classes.card,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(CardActionArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"weatherCardHeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"weatherCardHeaderDate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, moment(props.cardDate).format('dddd')), React.createElement(\"span\", {\n    className: \"weatherCardHeaderDate\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, selectedCardDateTitle)), React.createElement(CardContent, {\n    onClick: () => {\n      props.cardOnClickHandler({\n        cityName: props.cityName,\n        forecastData: props.forecastData,\n        titleDate: props.cardDate,\n        seletedItem: props.cardNumber,\n        timeSlot: selectedTimeSlot\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    style: {\n      color: \"rgb(29, 123, 123)\",\n      fontWeight: \"bold\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, props.cityName, \" \")), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    style: {\n      color: \"#545151\",\n      fontSize: \"46px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \" \", tempratureValue)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"weatherIcon wi wi-owm-\".concat(weatherIconId, \" main-icon\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }))), React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, \"Humidity: \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, humidityValue, \" \")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \" \", tempratureDescriptionText, \"  \")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, \"Wind: \", windValue), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"Sea Level: \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, sea_level))), React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }), React.createElement(TimeSliderComponent, {\n    timeSliderValue: timeSliderValue,\n    forecastData: props.forecastData,\n    onclickHandler: timeSliderChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  })), React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    radioButtonVaue: state.radioButtonVaue\n  };\n};\n\nexport default connect(mapStateToProps, null)(WeatherCard);","map":{"version":3,"sources":["C:\\Users\\Saed\\Desktop\\optile\\Optile-weather-app-master\\OptileWeatherapp-master\\OptileWeatherapp-master\\src\\components\\weatherCardComponent.js"],"names":["React","makeStyles","Card","CardActionArea","TimeSliderComponent","CardContent","Typography","CssBaseline","moment","connect","useStyles","card","maxWidth","media","height","WeatherCard","props","classes","forecastDataLength","forecastData","forecast","length","max","Date","dt_txt","maxSliderValue","format","maxSlider","setHours","useState","timeSliderValue","setTimeSliderValue","selectedTimeSlot","cardTimeSlot","selectedCardDateTitle","cardDate","getDayAverageTemprature","data","averageValue","radioButtonVaue","reduce","average","vaue","Math","round","main","temp_min","temp_max","min_cel","max_cel","divisinValue","getTimeSlotAverageTemprature","getSelectedTimeSlotData","selectedData","selectedTimeSlotStr","i","dateStr","getDayAverageHumidity","humidity","getDayAverageWind","wind","speed","getTempratureUnit","getTempratureValue","value","textUnit","getHumidityValue","getSeaLevel","sea_level","getWindValue","unit","getWeatherDescription","descrption","weather","description","getWatherIcon","iconId","id","tempratureValue","humidityValue","windValue","tempratureDescriptionText","weatherIconId","timeSliderChange","event","newValue","className","cardOnClickHandler","cityName","titleDate","seletedItem","cardNumber","timeSlot","color","fontWeight","display","justifyContent","fontSize","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport TimeSliderComponent from \"./timeSliderComponent\";\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport moment from \"moment\";\nimport {connect} from \"react-redux\";\n\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 400,\n  },\n  media: {\n    height: 150,\n  },\n});\n\nfunction WeatherCard(props){\n\tconst classes = useStyles();\t\n\tlet forecastDataLength=props.forecastData.forecast.length;\n\tconst max = new Date(props.forecastData.forecast[forecastDataLength-1].dt_txt);\n\tconst maxSliderValue=moment(props.forecastData.forecast[forecastDataLength-1].dt_txt).format(\"H\");\t\t\n\tconst maxSlider=max.setHours(maxSliderValue, 50, 50, 50);\n\tconst [timeSliderValue, setTimeSliderValue]=React.useState(maxSlider);\n\tlet selectedTimeSlot=props.cardTimeSlot;\t\n\tlet selectedCardDateTitle=moment(props.cardDate).format(\"D MMMM YY\");\t\n\tif(timeSliderValue !== maxSlider){\n\t\tselectedTimeSlot=timeSliderValue;\n\t\tselectedCardDateTitle=moment(timeSliderValue).format(\"D MMMM YY, h A\");\t\t\n\t}\n\n\tfunction getDayAverageTemprature(data){\n\t\tlet averageValue=\"\";\n\t\tif(props.radioButtonVaue === \"fahrenheit\"){\n\t\t\taverageValue=data.reduce((average,vaue)=>{\t\t\t\t\n\t\t\t\t\treturn Math.round(average+vaue.main.temp_min+vaue.main.temp_max);\t\t\t\t\n\t\t\t},0)\n\t\t}else{\n\t\t\taverageValue=data.reduce((average,vaue)=>{\n\t\t\t\tlet min_cel=Math.round((vaue.main.temp_min-32)/1.8);\n\t\t\t\tlet max_cel=Math.round((vaue.main.temp_max-32)/1.8);\n\t\t\t\treturn Math.round(average+min_cel+max_cel);\t\t\t\t\n\n\t\t\t},0);\n\t\t}\n\t\t\n\t\tlet divisinValue=data.length*2;\n\t\treturn Math.round(averageValue/divisinValue); \n\t}\n\n\tfunction getTimeSlotAverageTemprature(data){\n\t\tlet averageValue=1;\t\t\n\t\tif(props.radioButtonVaue === \"fahrenheit\"){\n\t\t\taverageValue= Math.round(data.main.temp_min+data.main.temp_max);\n\t\t}else{\n\t\t\tlet min_cel=Math.round((data.main.temp_min-32)/1.8);\n\t\t\tlet max_cel=Math.round((data.main.temp_max-32)/1.8);\n\t\t\taverageValue= Math.round(min_cel+max_cel);\n\t\t}\t\n\t\t\n\t\treturn Math.round(averageValue/2); \n\t}\n\n\tfunction getSelectedTimeSlotData(data,selectedTimeSlot){\n\n\t\tlet selectedData=\"\";\t\t\n\t\tlet selectedTimeSlotStr=moment(selectedTimeSlot).format(\"H\");\n\t\tfor(let i=0; i<data.length; i++ ){\n\t\t\tlet dateStr=moment(data[i].dt_txt).format(\"H\");\n\t\t\tif(selectedTimeSlotStr === dateStr){\n\t\t\t\tselectedData=data[i];\n\t\t\t}\n\t\t}\n\n\t\treturn selectedData;\n\t}\n\n\tfunction getDayAverageHumidity(data){\n\t\tlet averageValue=data.reduce((average,vaue)=>{ \n\t\t\treturn Math.round(average+vaue.main.humidity)\n\t\t},0)\n\t\tlet divisinValue=data.length;\n\t\treturn Math.round(averageValue/divisinValue); \n\t}\t\n\tfunction getDayAverageWind(data){\n\t\tlet averageValue=data.reduce((average,vaue)=>{ \n\t\t\treturn Math.round(average+vaue.wind.speed)\n\t\t},0)\n\t\tlet divisinValue=data.length;\n\t\treturn Math.round(averageValue/divisinValue); \n\t}\n\tfunction getTempratureUnit(){\n\t\treturn (props.radioButtonVaue === \"fahrenheit\")?\"°F\":\"°C\";\n\t}\t\n\n\tfunction getTempratureValue(){\n\t\tlet value=\"\";\n\t\tif(selectedTimeSlot === \"day\"){\n\t\t\tvalue=getDayAverageTemprature(props.forecastData.forecast);\t\t\t\n\t\t}else{\n\t\t\tlet selectedData=getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n\t\t\tvalue=getTimeSlotAverageTemprature(selectedData);\n\t\t}\n\t\tlet textUnit=getTempratureUnit();\n\t\treturn value+textUnit;\n\t\t\n\t}\n\tfunction getHumidityValue(){\n\t\tlet value=0;\n\t\tif(selectedTimeSlot === \"day\"){\n\t\t\tvalue=getDayAverageHumidity(props.forecastData.forecast);\n\t\t}else{\n\t\t\tlet selectedData=getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n\t\t\tvalue=selectedData.main.humidity;\n\t\t}\n\t\t\n\t\t\n\t\treturn `${value}%`;\n\t}\n\n\tfunction getSeaLevel(){\n\t\tlet value=0;\n\t\tif(selectedTimeSlot === \"day\"){\n\t\t\tvalue=getDayAverageHumidity(props.forecastData.forecast);\n\t\t}else{\n\t\t\tlet selectedData=getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n\t\t\tvalue=selectedData.main.sea_level;\n\t\t}\n\t\t\n\t\t\n\t\treturn `${value}%`;\n\t}\n\n\tfunction getWindValue(){\n\t\tlet value=0;\t\t\n\t\tlet unit =(props.radioButtonVaue === \"fahrenheit\")?\"mph\":\"meter/sec\";\t\t\n\t\tif(selectedTimeSlot === \"day\"){\n\t\t\tvalue=getDayAverageWind(props.forecastData.forecast);\n\t\t}else{\n\t\t\tlet selectedData=getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n\t\t\tvalue=Math.round(selectedData.wind.speed);\n\t\t}\n\t\treturn value+\" \"+unit;\n\t}\n\n\tfunction getWeatherDescription(){\n\t\tlet descrption=\"\";\n\t\tif(selectedTimeSlot !== \"day\"){\n\t\t\tlet selectedData=getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n\t\t\tdescrption=selectedData.weather[0].description;\n\t\t}\n\t\treturn descrption;\n\t}\n\tfunction getWatherIcon(){\n\t\tlet iconId=\"804\";\n\t\tif(selectedTimeSlot === \"day\"){\n\t\t\ticonId=props.forecastData.forecast[0].weather[0].id\n\t\t}else{\n\t\t\tlet selectedData=getSelectedTimeSlotData(props.forecastData.forecast, selectedTimeSlot);\n\t\t\ticonId=selectedData.weather[0].id;\n\t\t}\n\t\treturn iconId\n\t}\t\n\tconst tempratureValue=getTempratureValue();\n\tconst humidityValue=getHumidityValue();\n\tconst windValue=getWindValue();\n\tconst tempratureDescriptionText=getWeatherDescription();\n\tconst weatherIconId=getWatherIcon();\n\tconst sea_level=getSeaLevel();\n\n\tconst timeSliderChange = (event, newValue) => {\t\t\n    \tsetTimeSliderValue(newValue);    \t\n  \t};\n\n\treturn (\n\t\t<div className={props.className} >\n\t\t<Card className={classes.card} >\t\t\t\t\t\n\t\t\t<CardActionArea>\n\t\t\t\t<div className=\"weatherCardHeader\">\n\t\t\t\t\t\t<span className=\"weatherCardHeaderDate\">{moment(props.cardDate).format('dddd')}</span>\n\t\t\t\t\t\t<span className=\"weatherCardHeaderDate\">{selectedCardDateTitle}</span>\n\t\t\t\t</div>\n\t\t\t\t<CardContent onClick={()=>{props.cardOnClickHandler({cityName:props.cityName,forecastData:props.forecastData, titleDate:props.cardDate, seletedItem:props.cardNumber, timeSlot:selectedTimeSlot})}}>\t\t\t\t\t\n\t\t\t\t\t<Typography gutterBottom variant=\"h5\" component=\"h2\">\n\t\t            \t<span style={{color:\"rgb(29, 123, 123)\", fontWeight:\"bold\"}}>{props.cityName} </span>\n\t\t          \t</Typography>\n\t\t          \t<div style={{display:\"flex\",justifyContent:\"space-between\"}}>\n\t\t          \t\t<div>\n\t\t          \t\t\t<h1 style={{color:\"#545151\",fontSize:\"46px\"}}> {tempratureValue}</h1>\n\t\t          \t\t</div>\n\t\t          \t\t<div>\t\t          \t\t\t\n\t\t          \t\t\t<i className={`weatherIcon wi wi-owm-${weatherIconId} main-icon`} />\n\t          \t\t\t\n\t\t          \t\t</div>\n\t\t          \t</div>\n\t\t          \t<CssBaseline />\t\t          \t\n\t\t          \t<div style={{display:\"flex\",justifyContent:\"space-between\"}}>\t\t          \t\t\n\t\t          \t\t<div>\n\t\t          \t\t\tHumidity: <span>{humidityValue} </span>\t\t          \t\t\t\n\t\t          \t\t</div>\n\t\t          \t\t<div>\n\t\t          \t\t\t<span> {tempratureDescriptionText}  </span>\n\t\t          \t\t</div>\n\t\t          \t\t<div>\n\t\t\t\t\t\t    Wind: {windValue} \n\t\t          \t\t</div>\n\t\t\t\t\t\t  <div>\n\t\t          \t\t\tSea Level: <span>{sea_level}</span>\n\t\t          \t\t</div>\n\t\t          \t</div>\t\t          \t\n\t\t          \t<CssBaseline />\t\t\n\t\t\t\t    <TimeSliderComponent timeSliderValue={timeSliderValue} forecastData={props.forecastData} onclickHandler={timeSliderChange}/>\t          \t\n\t\t\t\t</CardContent>\t\n\t\t\t\t<CssBaseline/>\t\t\t\n\t\t\t</CardActionArea>\t\t\t\n\t\t</Card>\n\t\t</div>\n\t);\n}\n\nconst mapStateToProps=(state)=>{\n  return {    \n    radioButtonVaue:state.radioButtonVaue       \n  }\n}\n\nexport default connect(mapStateToProps, null)(WeatherCard);\n"]},"metadata":{},"sourceType":"module"}