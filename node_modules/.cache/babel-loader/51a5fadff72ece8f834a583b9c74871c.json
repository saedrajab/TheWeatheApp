{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Saed\\\\Desktop\\\\optile\\\\Optile-weather-app-master\\\\OptileWeatherapp-master\\\\OptileWeatherapp-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Saed\\\\Desktop\\\\optile\\\\Optile-weather-app-master\\\\OptileWeatherapp-master\\\\OptileWeatherapp-master\\\\src\\\\containerComponents\\\\horizantalscrollingComponent.js\";\nimport React, { useState } from \"react\";\nimport $ from 'jquery';\nimport moment from \"moment\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { connect } from \"react-redux\";\nimport WeatherBarChart from \"../components/barChartComponent\";\nimport WeatherCard from \"../components/weatherCardComponent\";\n\nfunction HorizantalScrollCard(props) {\n  const weatherData = props.weatherData.list;\n  const barChartConfig = {}; //const [cardLoadConfig, setLoadCardConfig]=useState({timeSlot:\"day\", seletedItem:\"cardNumber_0\"});\n\n  const cardLoadConfig = {\n    timeSlot: \"day\",\n    seletedItem: \"cardNumber_0\"\n  };\n  const formatedData = {};\n  const formatedDataArray = [];\n  weatherData.forEach(data => {\n    let weatherDate = moment(data.dt_txt).format(\"DD-MMM-YYYY\");\n\n    if (formatedData[weatherDate]) {\n      formatedData[weatherDate].forecast.push(data);\n    } else {\n      formatedData[weatherDate] = {\n        forecast: []\n      };\n      formatedData[weatherDate].forecast.push(data);\n      formatedDataArray.push({\n        weatherDate: formatedData[weatherDate]\n      });\n    }\n  });\n\n  function cardOnClickHandler(data) {\n    setBarChartOptions(data); //setLoadCardConfig({timeSlot:data.timeSlot,seletedItem:data.seletedItem});\t\t\n  }\n\n  function scroll(direction) {\n    var maxRange = $('.card-container').width();\n    let far = $('.card-container').width() / 2 * direction;\n    let pos = $('.card-container').scrollLeft() + far;\n    $('.card-container').animate({\n      scrollLeft: pos\n    }, 1000);\n\n    if (pos === 0) {\n      $(\".prev\").hide();\n      $(\".next\").show();\n    } else if (pos >= maxRange) {\n      $(\".next\").hide();\n      $(\".prev\").show();\n    } else {\n      $(\".next\").show();\n      $(\".prev\").show();\n    }\n  }\n\n  let cardList = [];\n  let i = 0;\n\n  for (const key of Object.keys(formatedData)) {\n    if (i === 0) {\n      barChartConfig.cityName = props.cityName;\n      barChartConfig.forecastData = formatedData[key];\n      barChartConfig.titleDate = key;\n    }\n\n    cardList.push(React.createElement(WeatherCard, {\n      key: key,\n      cityName: props.cityName,\n      className: \"card\",\n      forecastData: formatedData[key],\n      cardDate: key,\n      cardTimeSlot: cardLoadConfig.timeSlot,\n      cardNumber: \"cardNumber_\".concat(i),\n      seletedItem: cardLoadConfig.seletedItem,\n      temperatureType: props.temperatureType,\n      cardOnClickHandler: cardOnClickHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n    i++;\n  }\n\n  const _useState = useState(barChartConfig),\n        _useState2 = _slicedToArray(_useState, 2),\n        barChartOptions = _useState2[0],\n        setBarChartOptions = _useState2[1];\n\n  return React.createElement(\"div\", {\n    className: \"cardMainDiv\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"prev\",\n    style: {\n      display: \"none\"\n    },\n    onClick: () => {\n      scroll(-2);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"material-icons rotateCalss prevNextIcon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"arrow_right_alt\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"next\",\n    onClick: () => {\n      scroll(2);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"material-icons prevNextIcon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"arrow_right_alt\")))), React.createElement(\"div\", {\n    className: \"wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, cardList)), React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(WeatherBarChart, {\n    barChartConfigData: barChartOptions,\n    temperatureType: props.radioButtonVaue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    radioButtonVaue: state.radioButtonVaue\n  };\n};\n\nexport default connect(mapStateToProps, null)(HorizantalScrollCard);","map":{"version":3,"sources":["C:\\Users\\Saed\\Desktop\\optile\\Optile-weather-app-master\\OptileWeatherapp-master\\OptileWeatherapp-master\\src\\containerComponents\\horizantalscrollingComponent.js"],"names":["React","useState","$","moment","CssBaseline","connect","WeatherBarChart","WeatherCard","HorizantalScrollCard","props","weatherData","list","barChartConfig","cardLoadConfig","timeSlot","seletedItem","formatedData","formatedDataArray","forEach","data","weatherDate","dt_txt","format","forecast","push","cardOnClickHandler","setBarChartOptions","scroll","direction","maxRange","width","far","pos","scrollLeft","animate","hide","show","cardList","i","key","Object","keys","cityName","forecastData","titleDate","temperatureType","barChartOptions","display","justifyContent","radioButtonVaue","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport $ from 'jquery';\nimport moment from \"moment\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {connect} from \"react-redux\";\nimport WeatherBarChart from \"../components/barChartComponent\";\nimport WeatherCard from \"../components/weatherCardComponent\";\n\nfunction HorizantalScrollCard(props){\t\n\tconst weatherData=props.weatherData.list;\n\tconst barChartConfig={};\n\t//const [cardLoadConfig, setLoadCardConfig]=useState({timeSlot:\"day\", seletedItem:\"cardNumber_0\"});\n\tconst cardLoadConfig={timeSlot:\"day\", seletedItem:\"cardNumber_0\"};\n\tconst formatedData={};\n\tconst formatedDataArray=[];\n\tweatherData.forEach((data)=>{\n\t\tlet weatherDate=moment(data.dt_txt).format(\"DD-MMM-YYYY\");\n\t\tif(formatedData[weatherDate]){\n\t\t\tformatedData[weatherDate].forecast.push(data);\n\t\t}else{\n\t\t\tformatedData[weatherDate]={forecast:[]}\n\t\t\tformatedData[weatherDate].forecast.push(data);\n\t\t\tformatedDataArray.push({weatherDate:formatedData[weatherDate]});\n\t\t}\n\t});\n\t\n\tfunction cardOnClickHandler(data){\n\t\tsetBarChartOptions(data);\n\t\t//setLoadCardConfig({timeSlot:data.timeSlot,seletedItem:data.seletedItem});\t\t\n\t}\n\t\n\tfunction scroll(direction){\n\t\tvar maxRange = $( '.card-container' ).width();\n\t    let far = $( '.card-container' ).width()/2*direction;\n\t    let pos = $('.card-container').scrollLeft() + far;\t    \n\t    $('.card-container').animate( { scrollLeft: pos }, 1000);\n\t    if(pos === 0){\n\t    \t$(\".prev\").hide();\n\t    \t$(\".next\").show();\n\t    }else if(pos >= maxRange){\n\t    \t$(\".next\").hide();\n\t    \t$(\".prev\").show();\n\t    }else{\n\t    \t$(\".next\").show();\n\t    \t$(\".prev\").show();\t    \n\t    }\n  \t}\n  \tlet cardList=[];\n  \tlet i=0;\n  \tfor (const key of Object.keys(formatedData)) {\n  \t\t\tif(i===0){  \t\t\t\t\n  \t\t\t\tbarChartConfig.cityName=props.cityName;\n  \t\t\t\tbarChartConfig.forecastData=formatedData[key];\n  \t\t\t\tbarChartConfig.titleDate=key;\n  \t\t\t}\t\t\t\n\t\t\tcardList.push(<WeatherCard key={key} \n\t\t\t\t\t\t\tcityName={props.cityName} \n\t\t\t\t\t\t\tclassName=\"card\" \n\t\t\t\t\t\t\tforecastData={formatedData[key]}\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcardDate={key}\n\t\t\t\t\t\t\tcardTimeSlot={cardLoadConfig.timeSlot}\n\t\t\t\t\t\t\tcardNumber={`cardNumber_${i}`}\n\t\t\t\t\t\t\tseletedItem={cardLoadConfig.seletedItem}\n\t\t\t\t\t\t\ttemperatureType={props.temperatureType}\n\t\t\t\t\t\t\tcardOnClickHandler={cardOnClickHandler}/>\n\t\t\t\t\t\t);\n\t\t\ti++;\n\t}\n\t\n\tconst [barChartOptions, setBarChartOptions]\t=useState(barChartConfig);\n  return (  \t\t\n\t\t<div className=\"cardMainDiv\">\t\t\n\t      <div style={{display:\"flex\",justifyContent:\"space-between\"}}>\n\t      \t<div>\n\n\t      \t\t<span className=\"prev\" style={{display:\"none\"}} onClick={()=>{scroll(-2)}}>\n\t      \t\t\t<i className=\"material-icons rotateCalss prevNextIcon\">\n\t\t\t\t\t\tarrow_right_alt\n\t\t\t\t\t</i>\n\t      \t\t</span>\n\t      \t</div>\n\t      \t<div>\t\t\t\t\n\t      \t\t<span className=\"next\" onClick={()=>{scroll(2)}}>\n\t      \t\t\t<i className=\"material-icons prevNextIcon\">\n\t\t\t\t\t\tarrow_right_alt\n\t\t\t\t\t</i>\n\t\t\t\t\t \n\t      \t\t</span>\n\t      \t</div>\n\t      </div>\n\t      <div className=\"wrapper\">\t        \n\t        <div className=\"card-container\">\n\t          {cardList}\t          \t          \n\t        </div>\t        \n\t      </div>\n\t      <CssBaseline />\n\t    <WeatherBarChart barChartConfigData={barChartOptions} temperatureType={props.radioButtonVaue}/>\n\t    </div>\n\t    \n\n\t);\n}  \n\nconst mapStateToProps=(state)=>{\n  return {    \n    radioButtonVaue:state.radioButtonVaue       \n  }\n}\n\nexport default connect(mapStateToProps, null)(HorizantalScrollCard);"]},"metadata":{},"sourceType":"module"}